attribute_data.npy
Attributes verification.ipynb
demo.py
dense_attr_color_erasing.txt
dense_attr_color.txt
dense_attr_no_color.txt
dense_attr.txt
downcolor.npy
Ensembling experimentation.ipynb
evaluate_gpu.py
evaluate_int.py
evaluate.py
evaluate_rerank.py
extract.py
extract_tta.py
labels.npy
LICENSE
model
model.py
output_pcb_attr.txt
output_sat_color.txt
output_sat_erasing.txt
output_sat.txt
prepare.py
prepare_static.py
__pycache__
random_erasing.py
README.md
re_ranking.py
show.png
test.py
train_attr.py
train.jpg
train_pcb_attr.py
train_pcb_attr_resnet.py
train.py
tta_expermimenation.ipynb
tutorial
Untitled.ipynb
upcolor.npy
net output size:
torch.Size([8, 751])
0
[ColorJitter(brightness=0.1, contrast=0.1, saturation=0.1, hue=0), Resize(size=(288, 144), interpolation=PIL.Image.BICUBIC), RandomCrop(size=(256, 128), padding=0), RandomHorizontalFlip(p=0.5), ToTensor(), Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]), <random_erasing.RandomErasing object at 0x7f517b0e1320>]
/opt/anaconda3/lib/python3.7/site-packages/torchvision-0.2.1-py3.7.egg/torchvision/models/densenet.py:212: UserWarning: nn.init.kaiming_normal is now deprecated in favor of nn.init.kaiming_normal_.
/home/janardhan/AI_Person_ReID/Person_reID_baseline_pytorch-master/model.py:14: UserWarning: nn.init.kaiming_normal is now deprecated in favor of nn.init.kaiming_normal_.
  init.kaiming_normal(m.weight.data, a=0, mode='fan_out')
/home/janardhan/AI_Person_ReID/Person_reID_baseline_pytorch-master/model.py:15: UserWarning: nn.init.constant is now deprecated in favor of nn.init.constant_.
  init.constant(m.bias.data, 0.0)
/home/janardhan/AI_Person_ReID/Person_reID_baseline_pytorch-master/model.py:17: UserWarning: nn.init.normal is now deprecated in favor of nn.init.normal_.
  init.normal(m.weight.data, 1.0, 0.02)
/home/janardhan/AI_Person_ReID/Person_reID_baseline_pytorch-master/model.py:18: UserWarning: nn.init.constant is now deprecated in favor of nn.init.constant_.
  init.constant(m.bias.data, 0.0)
/home/janardhan/AI_Person_ReID/Person_reID_baseline_pytorch-master/model.py:23: UserWarning: nn.init.normal is now deprecated in favor of nn.init.normal_.
  init.normal(m.weight.data, std=0.001)
/home/janardhan/AI_Person_ReID/Person_reID_baseline_pytorch-master/model.py:24: UserWarning: nn.init.constant is now deprecated in favor of nn.init.constant_.
  init.constant(m.bias.data, 0.0)
0.5221922397613525
attr_data.shape
torch.Size([1501, 12])
ft_attr_net_dense(
  (model): DenseNet(
    (features): Sequential(
      (conv0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (norm0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu0): ReLU(inplace)
      (pool0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (denseblock1): _DenseBlock(
        (denselayer1): _DenseLayer(
          (norm1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer2): _DenseLayer(
          (norm1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer3): _DenseLayer(
          (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer4): _DenseLayer(
          (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer5): _DenseLayer(
          (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer6): _DenseLayer(
          (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (transition1): _Transition(
        (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
      )
      (denseblock2): _DenseBlock(
        (denselayer1): _DenseLayer(
          (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer2): _DenseLayer(
          (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer3): _DenseLayer(
          (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer4): _DenseLayer(
          (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer5): _DenseLayer(
          (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer6): _DenseLayer(
          (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer7): _DenseLayer(
          (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer8): _DenseLayer(
          (norm1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer9): _DenseLayer(
          (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer10): _DenseLayer(
          (norm1): BatchNorm2d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer11): _DenseLayer(
          (norm1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer12): _DenseLayer(
          (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (transition2): _Transition(
        (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
      )
      (denseblock3): _DenseBlock(
        (denselayer1): _DenseLayer(
          (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer2): _DenseLayer(
          (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer3): _DenseLayer(
          (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer4): _DenseLayer(
          (norm1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer5): _DenseLayer(
          (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer6): _DenseLayer(
          (norm1): BatchNorm2d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer7): _DenseLayer(
          (norm1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer8): _DenseLayer(
          (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer9): _DenseLayer(
          (norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer10): _DenseLayer(
          (norm1): BatchNorm2d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer11): _DenseLayer(
          (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer12): _DenseLayer(
          (norm1): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer13): _DenseLayer(
          (norm1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(640, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer14): _DenseLayer(
          (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(672, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer15): _DenseLayer(
          (norm1): BatchNorm2d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(704, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer16): _DenseLayer(
          (norm1): BatchNorm2d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(736, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer17): _DenseLayer(
          (norm1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer18): _DenseLayer(
          (norm1): BatchNorm2d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(800, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer19): _DenseLayer(
          (norm1): BatchNorm2d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer20): _DenseLayer(
          (norm1): BatchNorm2d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(864, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer21): _DenseLayer(
          (norm1): BatchNorm2d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(896, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer22): _DenseLayer(
          (norm1): BatchNorm2d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(928, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer23): _DenseLayer(
          (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer24): _DenseLayer(
          (norm1): BatchNorm2d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(992, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (transition3): _Transition(
        (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
      )
      (denseblock4): _DenseBlock(
        (denselayer1): _DenseLayer(
          (norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer2): _DenseLayer(
          (norm1): BatchNorm2d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer3): _DenseLayer(
          (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer4): _DenseLayer(
          (norm1): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer5): _DenseLayer(
          (norm1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(640, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer6): _DenseLayer(
          (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(672, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer7): _DenseLayer(
          (norm1): BatchNorm2d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(704, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer8): _DenseLayer(
          (norm1): BatchNorm2d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(736, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer9): _DenseLayer(
          (norm1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer10): _DenseLayer(
          (norm1): BatchNorm2d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(800, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer11): _DenseLayer(
          (norm1): BatchNorm2d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer12): _DenseLayer(
          (norm1): BatchNorm2d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(864, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer13): _DenseLayer(
          (norm1): BatchNorm2d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(896, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer14): _DenseLayer(
          (norm1): BatchNorm2d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(928, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer15): _DenseLayer(
          (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer16): _DenseLayer(
          (norm1): BatchNorm2d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace)
          (conv1): Conv2d(992, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (norm5): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    )
    (classifier): Linear(in_features=1024, out_features=1000, bias=True)
    (fc): Sequential()
  )
  (classifier): ClassBlock(
    (add_block): Sequential(
      (0): Linear(in_features=1024, out_features=512, bias=True)
      (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.1)
      (3): Dropout(p=0.5)
    )
    (classifier): Sequential(
      (0): Linear(in_features=512, out_features=1500, bias=True)
    )
  )
  (classifierage): ClassBlock(
    (add_block): Sequential(
      (0): Linear(in_features=1024, out_features=512, bias=True)
      (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.1)
      (3): Dropout(p=0.5)
    )
    (classifier): Sequential(
      (0): Linear(in_features=512, out_features=4, bias=True)
    )
  )
  (classifierbackpack): ClassBlock(
    (add_block): Sequential(
      (0): Linear(in_features=1024, out_features=512, bias=True)
      (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.1)
      (3): Dropout(p=0.5)
    )
    (classifier): Sequential(
      (0): Linear(in_features=512, out_features=2, bias=True)
    )
  )
  (classifierbag): ClassBlock(
    (add_block): Sequential(
      (0): Linear(in_features=1024, out_features=512, bias=True)
      (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.1)
      (3): Dropout(p=0.5)
    )
    (classifier): Sequential(
      (0): Linear(in_features=512, out_features=2, bias=True)
    )
  )
  (classifierhandbag): ClassBlock(
    (add_block): Sequential(
      (0): Linear(in_features=1024, out_features=512, bias=True)
      (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.1)
      (3): Dropout(p=0.5)
    )
    (classifier): Sequential(
      (0): Linear(in_features=512, out_features=2, bias=True)
    )
  )
  (classifierdowncolor): ClassBlock(
    (add_block): Sequential(
      (0): Linear(in_features=1024, out_features=512, bias=True)
      (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.1)
      (3): Dropout(p=0.5)
    )
    (classifier): Sequential(
      (0): Linear(in_features=512, out_features=9, bias=True)
    )
  )
  (classifierupcolor): ClassBlock(
    (add_block): Sequential(
      (0): Linear(in_features=1024, out_features=512, bias=True)
      (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.1)
      (3): Dropout(p=0.5)
    )
    (classifier): Sequential(
      (0): Linear(in_features=512, out_features=8, bias=True)
    )
  )
  (classifierclothes): ClassBlock(
    (add_block): Sequential(
      (0): Linear(in_features=1024, out_features=512, bias=True)
      (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.1)
      (3): Dropout(p=0.5)
    )
    (classifier): Sequential(
      (0): Linear(in_features=512, out_features=2, bias=True)
    )
  )
  (classifierdown): ClassBlock(
    (add_block): Sequential(
      (0): Linear(in_features=1024, out_features=512, bias=True)
      (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.1)
      (3): Dropout(p=0.5)
    )
    (classifier): Sequential(
      (0): Linear(in_features=512, out_features=2, bias=True)
    )
  )
  (classifierup): ClassBlock(
    (add_block): Sequential(
      (0): Linear(in_features=1024, out_features=512, bias=True)
      (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.1)
      (3): Dropout(p=0.5)
    )
    (classifier): Sequential(
      (0): Linear(in_features=512, out_features=2, bias=True)
    )
  )
  (classifierhair): ClassBlock(
    (add_block): Sequential(
      (0): Linear(in_features=1024, out_features=512, bias=True)
      (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.1)
      (3): Dropout(p=0.5)
    )
    (classifier): Sequential(
      (0): Linear(in_features=512, out_features=2, bias=True)
    )
  )
  (classifierhat): ClassBlock(
    (add_block): Sequential(
      (0): Linear(in_features=1024, out_features=512, bias=True)
      (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.1)
      (3): Dropout(p=0.5)
    )
    (classifier): Sequential(
      (0): Linear(in_features=512, out_features=2, bias=True)
    )
  )
  (classifiergender): ClassBlock(
    (add_block): Sequential(
      (0): Linear(in_features=1024, out_features=512, bias=True)
      (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): LeakyReLU(negative_slope=0.1)
      (3): Dropout(p=0.5)
    )
    (classifier): Sequential(
      (0): Linear(in_features=512, out_features=2, bias=True)
    )
  )
)
Epoch 0/59
----------
train Loss: 4.7835 Attr Loss: 8.1722 Acc: 0.1884
attribute accuracies
[0.81030541 0.73178997 0.764862   0.89241385 0.4366732  0.29523926
 0.87693941 0.63126735 0.94720725 0.65670423 0.97190919 0.57275845]
val Loss: 2.9816 Attr Loss: 7.9616 Acc: 0.3733
attribute accuracies
[0.79066667 0.728      0.73866667 0.876      0.42666667 0.282
 0.856      0.61333333 0.92666667 0.64133333 0.95266667 0.56733333]
Epoch 1/59
----------
train Loss: 2.1306 Attr Loss: 7.9516 Acc: 0.5094
attribute accuracies
[0.81185693 0.73227993 0.76527029 0.89310795 0.43855136 0.31377593
 0.87779683 0.63049159 0.94786053 0.65919484 0.97248081 0.59109097]
val Loss: 1.6417 Attr Loss: 7.9059 Acc: 0.6067
attribute accuracies
[0.788      0.73       0.74133333 0.87466667 0.42733333 0.29933333
 0.85466667 0.616      0.926      0.64466667 0.95266667 0.57533333]
Epoch 2/59
----------
train Loss: 1.3757 Attr Loss: 7.8767 Acc: 0.6607
attribute accuracies
[0.81189776 0.7329332  0.7662502  0.89310795 0.43973542 0.31749143
 0.87787849 0.63563613 0.94786053 0.66237955 0.97256247 0.59603136]
val Loss: 1.2003 Attr Loss: 7.8587 Acc: 0.6907
attribute accuracies
[0.79266667 0.72666667 0.74       0.87733333 0.426      0.30533333
 0.85466667 0.61666667 0.926      0.64733333 0.954      0.59      ]
Epoch 3/59
----------
train Loss: 1.0473 Attr Loss: 7.8246 Acc: 0.7346
attribute accuracies
[0.81169361 0.73309652 0.76604606 0.89302629 0.44022538 0.32479993
 0.87783766 0.63771844 0.94786053 0.66225706 0.97248081 0.6088927 ]
val Loss: 0.9637 Attr Loss: 7.8303 Acc: 0.7327
attribute accuracies
[0.792      0.72866667 0.74133333 0.874      0.42933333 0.32
 0.85466667 0.62133333 0.926      0.648      0.95266667 0.57266667]
Epoch 4/59
----------
train Loss: 0.8531 Attr Loss: 7.7803 Acc: 0.7783
attribute accuracies
[0.81173444 0.73276988 0.7662502  0.89318961 0.44087865 0.33186347
 0.87796015 0.63906582 0.94790136 0.66556427 0.97248081 0.61248571]
val Loss: 0.8091 Attr Loss: 7.8303 Acc: 0.7807
attribute accuracies
[0.78933333 0.72733333 0.73733333 0.87333333 0.42733333 0.314
 0.852      0.62933333 0.92533333 0.646      0.95266667 0.572     ]
Epoch 5/59
----------
train Loss: 0.7377 Attr Loss: 7.7504 Acc: 0.8136
attribute accuracies
[0.81177527 0.73309652 0.76580108 0.89335293 0.44104197 0.33504818
 0.87796015 0.64229136 0.94786053 0.66678916 0.97252164 0.62167238]
val Loss: 0.6675 Attr Loss: 7.7983 Acc: 0.8193
attribute accuracies
[0.79266667 0.72866667 0.73866667 0.87533333 0.426      0.31866667
 0.85133333 0.62866667 0.92866667 0.64733333 0.95266667 0.58666667]
Epoch 6/59
----------
train Loss: 0.6783 Attr Loss: 7.7244 Acc: 0.8275
attribute accuracies
[0.81177527 0.73321901 0.7662502  0.89318961 0.44128695 0.33725298
 0.877756   0.64216887 0.94790136 0.66752409 0.97256247 0.62951168]
val Loss: 0.6313 Attr Loss: 7.7974 Acc: 0.8247
attribute accuracies
[0.788      0.72666667 0.74066667 0.874      0.426      0.31066667
 0.85266667 0.62266667 0.928      0.65066667 0.95333333 0.59666667]
Epoch 7/59
----------
train Loss: 0.6247 Attr Loss: 7.6931 Acc: 0.8419
attribute accuracies
[0.8118161  0.73370897 0.76645435 0.89310795 0.44181774 0.33994774
 0.87796015 0.64764005 0.94786053 0.6700147  0.97252164 0.63310469]
val Loss: 0.6512 Attr Loss: 7.7890 Acc: 0.8287
attribute accuracies
[0.78933333 0.73133333 0.73733333 0.87466667 0.432      0.31
 0.85333333 0.628      0.92666667 0.656      0.95333333 0.59866667]
Epoch 8/59
----------
train Loss: 0.5781 Attr Loss: 7.6616 Acc: 0.8548
attribute accuracies
[0.81169361 0.73342316 0.76604606 0.89302629 0.44283848 0.34051935
 0.87800098 0.65062061 0.94786053 0.67242365 0.97243998 0.64192389]
val Loss: 0.6190 Attr Loss: 7.7544 Acc: 0.8293
attribute accuracies
[0.78866667 0.72866667 0.73666667 0.876      0.42933333 0.33333333
 0.85333333 0.63       0.928      0.65133333 0.954      0.60666667]
Epoch 9/59
----------
train Loss: 0.5445 Attr Loss: 7.6261 Acc: 0.8635
attribute accuracies
[0.81185693 0.73395394 0.7659644  0.89306712 0.44541075 0.35252327
 0.87800098 0.65360118 0.94786053 0.6788339  0.97248081 0.65221297]
val Loss: 0.5962 Attr Loss: 7.7272 Acc: 0.8460
attribute accuracies
[0.79066667 0.728      0.74       0.87666667 0.42666667 0.33466667
 0.85466667 0.64       0.92666667 0.64666667 0.95333333 0.594     ]
Epoch 10/59
----------
train Loss: 0.5199 Attr Loss: 7.6020 Acc: 0.8718
attribute accuracies
[0.81165278 0.73317818 0.76608689 0.89306712 0.4459007  0.35374816
 0.87808264 0.65976645 0.94794219 0.68005879 0.97248081 0.65796995]
val Loss: 0.5293 Attr Loss: 7.7248 Acc: 0.8567
attribute accuracies
[0.78866667 0.72933333 0.74066667 0.87466667 0.42866667 0.32266667
 0.856      0.62933333 0.92666667 0.658      0.954      0.62333333]
Epoch 11/59
----------
train Loss: 0.4866 Attr Loss: 7.5663 Acc: 0.8793
attribute accuracies
[0.8118161  0.73440307 0.76588274 0.89318961 0.44749306 0.35750449
 0.87791932 0.65715336 0.94786053 0.6844684  0.97243998 0.66474767]
val Loss: 0.5721 Attr Loss: 7.6842 Acc: 0.8507
attribute accuracies
[0.79       0.73066667 0.73933333 0.87466667 0.42866667 0.33066667
 0.854      0.644      0.92866667 0.65733333 0.95333333 0.60533333]
Epoch 12/59
----------
train Loss: 0.4858 Attr Loss: 7.5445 Acc: 0.8812
attribute accuracies
[0.81185693 0.73489303 0.76608689 0.89298546 0.45051445 0.35803528
 0.87800098 0.66082803 0.94790136 0.6851625  0.97243998 0.66487016]
val Loss: 0.4903 Attr Loss: 7.6837 Acc: 0.8653
attribute accuracies
[0.792      0.72933333 0.74066667 0.87333333 0.442      0.33466667
 0.85133333 0.642      0.926      0.65866667 0.95266667 0.622     ]
Epoch 13/59
----------
train Loss: 0.4867 Attr Loss: 7.5221 Acc: 0.8812
attribute accuracies
[0.81177527 0.73399477 0.76567859 0.89314878 0.45418912 0.36003593
 0.87787849 0.6651968  0.94786053 0.68985791 0.97252164 0.66940225]
val Loss: 0.5468 Attr Loss: 7.6559 Acc: 0.8527
attribute accuracies
[0.78866667 0.72933333 0.73933333 0.87466667 0.436      0.33666667
 0.85266667 0.648      0.92666667 0.65866667 0.95266667 0.61866667]
Epoch 14/59
----------
train Loss: 0.4650 Attr Loss: 7.4983 Acc: 0.8881
attribute accuracies
[0.81177527 0.7348522  0.76588274 0.89298546 0.45700637 0.36142414
 0.87800098 0.66564593 0.9478197  0.69128695 0.97243998 0.67034134]
val Loss: 0.4696 Attr Loss: 7.6539 Acc: 0.8740
attribute accuracies
[0.79266667 0.72733333 0.74266667 0.87466667 0.44933333 0.334
 0.85533333 0.63933333 0.92666667 0.66       0.95266667 0.598     ]
Epoch 15/59
----------
train Loss: 0.4387 Attr Loss: 7.4760 Acc: 0.8935
attribute accuracies
[0.81197942 0.73423975 0.76588274 0.89323044 0.46162012 0.36407807
 0.87779683 0.66687081 0.94798301 0.69553324 0.97252164 0.67140291]
val Loss: 0.4821 Attr Loss: 7.6355 Acc: 0.8687
attribute accuracies
[0.79       0.72733333 0.74       0.87533333 0.43266667 0.33333333
 0.854      0.64       0.92866667 0.668      0.954      0.62333333]
Epoch 16/59
----------
train Loss: 0.4314 Attr Loss: 7.4588 Acc: 0.8961
attribute accuracies
[0.81210191 0.73387228 0.76567859 0.89318961 0.46300833 0.36685448
 0.87787849 0.67074963 0.94790136 0.69692144 0.97248081 0.67613915]
val Loss: 0.4933 Attr Loss: 7.6260 Acc: 0.8667
attribute accuracies
[0.79133333 0.72933333 0.74       0.878      0.44533333 0.32533333
 0.85266667 0.636      0.926      0.67066667 0.95333333 0.62733333]
Epoch 17/59
----------
train Loss: 0.4288 Attr Loss: 7.4452 Acc: 0.8988
attribute accuracies
[0.81226523 0.73477054 0.76580108 0.89318961 0.46484566 0.36714029
 0.87783766 0.66895313 0.9478197  0.69933039 0.97252164 0.67764984]
val Loss: 0.5052 Attr Loss: 7.6208 Acc: 0.8720
attribute accuracies
[0.79133333 0.72933333 0.73933333 0.87733333 0.43933333 0.31
 0.85333333 0.64066667 0.92533333 0.66933333 0.95266667 0.61666667]
Epoch 18/59
----------
train Loss: 0.4241 Attr Loss: 7.4385 Acc: 0.8970
attribute accuracies
[0.81226523 0.73407643 0.7655561  0.89306712 0.46945942 0.37024334
 0.877756   0.67103544 0.94790136 0.70243345 0.97243998 0.6763433 ]
val Loss: 0.4809 Attr Loss: 7.6046 Acc: 0.8767
attribute accuracies
[0.79066667 0.72733333 0.74066667 0.876      0.44266667 0.342
 0.85533333 0.64       0.926      0.66933333 0.95266667 0.61933333]
Epoch 19/59
----------
train Loss: 0.4107 Attr Loss: 7.4246 Acc: 0.9031
attribute accuracies
[0.81234689 0.7348522  0.76563776 0.8933121  0.47235832 0.37159072
 0.87796015 0.6711171  0.94790136 0.70100441 0.97248081 0.67671076]
val Loss: 0.4655 Attr Loss: 7.6133 Acc: 0.8807
attribute accuracies
[0.79333333 0.72933333 0.73933333 0.876      0.43933333 0.338
 0.85333333 0.63933333 0.92666667 0.67066667 0.95266667 0.61466667]
Epoch 20/59
----------
train Loss: 0.4037 Attr Loss: 7.4141 Acc: 0.9051
attribute accuracies
[0.81218357 0.73411726 0.7655561  0.89302629 0.47080679 0.37110077
 0.87804181 0.67315858 0.94794219 0.70492406 0.97243998 0.67818063]
val Loss: 0.4488 Attr Loss: 7.6107 Acc: 0.8787
attribute accuracies
[0.792      0.72866667 0.74066667 0.876      0.438      0.33533333
 0.85266667 0.65066667 0.92666667 0.66933333 0.95333333 0.61466667]
Epoch 21/59
----------
train Loss: 0.3856 Attr Loss: 7.3957 Acc: 0.9080
attribute accuracies
[0.81206108 0.73526049 0.76535195 0.89318961 0.47464478 0.37457129
 0.87783766 0.67360771 0.94786053 0.70819043 0.97256247 0.67777233]
val Loss: 0.4533 Attr Loss: 7.5917 Acc: 0.8900
attribute accuracies
[0.79       0.72666667 0.74066667 0.87466667 0.44866667 0.32333333
 0.854      0.63533333 0.92733333 0.66733333 0.95266667 0.62733333]
Epoch 22/59
----------
train Loss: 0.3805 Attr Loss: 7.3865 Acc: 0.9087
attribute accuracies
[0.8129185  0.735138   0.7659644  0.89314878 0.47978932 0.37853177
 0.87771517 0.67148457 0.94790136 0.71080353 0.97243998 0.68246774]
val Loss: 0.4617 Attr Loss: 7.6140 Acc: 0.8733
attribute accuracies
[0.792      0.72733333 0.73733333 0.87533333 0.446      0.32466667
 0.85333333 0.63933333 0.92666667 0.67133333 0.95266667 0.62      ]
Epoch 23/59
----------
train Loss: 0.3708 Attr Loss: 7.3709 Acc: 0.9130
attribute accuracies
[0.8129185  0.73481137 0.76588274 0.89314878 0.47929936 0.37734771
 0.87791932 0.67426098 0.94786053 0.71329414 0.97252164 0.68357015]
val Loss: 0.4979 Attr Loss: 7.5996 Acc: 0.8607
attribute accuracies
[0.79133333 0.73       0.74       0.874      0.44533333 0.33733333
 0.85266667 0.634      0.92533333 0.67733333 0.95266667 0.626     ]
Epoch 24/59
----------
train Loss: 0.3691 Attr Loss: 7.3649 Acc: 0.9138
attribute accuracies
[0.81308182 0.73481137 0.76604606 0.89306712 0.4822391  0.37836845
 0.87800098 0.67462845 0.94798301 0.71215091 0.97243998 0.68487669]
val Loss: 0.4959 Attr Loss: 7.5835 Acc: 0.8700
attribute accuracies
[0.79066667 0.72866667 0.73933333 0.87533333 0.44266667 0.33133333
 0.85466667 0.64466667 0.926      0.68066667 0.95333333 0.63933333]
Epoch 25/59
----------
train Loss: 0.3750 Attr Loss: 7.3498 Acc: 0.9115
attribute accuracies
[0.8126327  0.73656704 0.76592357 0.89310795 0.48027927 0.38277805
 0.87791932 0.6774457  0.94794219 0.71202842 0.97248081 0.68369263]
val Loss: 0.4205 Attr Loss: 7.5547 Acc: 0.8833
attribute accuracies
[0.796      0.73133333 0.74133333 0.876      0.45466667 0.35333333
 0.85666667 0.64733333 0.92733333 0.664      0.95333333 0.62066667]
Epoch 26/59
----------
train Loss: 0.3406 Attr Loss: 7.3387 Acc: 0.9190
attribute accuracies
[0.81300016 0.7366487  0.76592357 0.89310795 0.4829332  0.38285971
 0.87783766 0.67809897 0.94790136 0.71758125 0.97243998 0.68793892]
val Loss: 0.3995 Attr Loss: 7.5526 Acc: 0.8893
attribute accuracies
[0.79266667 0.72933333 0.74       0.876      0.44933333 0.33733333
 0.85466667 0.64133333 0.92733333 0.68666667 0.954      0.63466667]
Epoch 27/59
----------
train Loss: 0.3434 Attr Loss: 7.3250 Acc: 0.9198
attribute accuracies
[0.81357178 0.73632206 0.76645435 0.89314878 0.48611792 0.38175731
 0.87783766 0.68152866 0.94790136 0.71664217 0.97243998 0.68944962]
val Loss: 0.4463 Attr Loss: 7.5499 Acc: 0.8753
attribute accuracies
[0.79266667 0.73333333 0.742      0.87533333 0.45333333 0.344
 0.85266667 0.64933333 0.92733333 0.66866667 0.95466667 0.62      ]
Epoch 28/59
----------
train Loss: 0.3548 Attr Loss: 7.3194 Acc: 0.9181
attribute accuracies
[0.81381676 0.73591377 0.76620937 0.89323044 0.48452556 0.38453373
 0.87787849 0.68299853 0.9478197  0.72023518 0.97252164 0.68830639]
val Loss: 0.4510 Attr Loss: 7.5787 Acc: 0.8727
attribute accuracies
[0.79066667 0.73066667 0.73933333 0.874      0.458      0.34066667
 0.854      0.648      0.926      0.676      0.95333333 0.62333333]
Epoch 29/59
----------
train Loss: 0.3502 Attr Loss: 7.2980 Acc: 0.9219
attribute accuracies
[0.81365344 0.73717949 0.76661767 0.89306712 0.48758778 0.38902499
 0.87779683 0.68214111 0.94798301 0.72003103 0.97248081 0.69467581]
val Loss: 0.4732 Attr Loss: 7.5372 Acc: 0.8727
attribute accuracies
[0.79       0.732      0.74333333 0.87533333 0.438      0.34666667
 0.85533333 0.64466667 0.926      0.68333333 0.95266667 0.63666667]
Epoch 30/59
----------
train Loss: 0.1881 Attr Loss: 7.1779 Acc: 0.9616
attribute accuracies
[0.81414339 0.7381594  0.7670668  0.89302629 0.49697861 0.40098808
 0.877756   0.69402254 0.94794219 0.73489303 0.97252164 0.7066389 ]
val Loss: 0.2146 Attr Loss: 7.4316 Acc: 0.9313
attribute accuracies
[0.79333333 0.732      0.74066667 0.87533333 0.45466667 0.35533333
 0.85333333 0.65266667 0.928      0.69266667 0.95333333 0.658     ]
Epoch 31/59
----------
train Loss: 0.1163 Attr Loss: 7.0984 Acc: 0.9792
attribute accuracies
[0.81512331 0.74016005 0.7677609  0.89302629 0.50579781 0.40972562
 0.87791932 0.69888127 0.94794219 0.74056835 0.97256247 0.7177854 ]
val Loss: 0.1916 Attr Loss: 7.3878 Acc: 0.9433
attribute accuracies
[0.79266667 0.73333333 0.744      0.87666667 0.458      0.36133333
 0.852      0.65133333 0.92733333 0.69666667 0.95466667 0.64866667]
Epoch 32/59
----------
train Loss: 0.1011 Attr Loss: 7.0549 Acc: 0.9828
attribute accuracies
[0.81602156 0.74118079 0.76755675 0.89327127 0.51159562 0.4136861
 0.87791932 0.70288257 0.94794219 0.74354891 0.9726033  0.72190919]
val Loss: 0.1832 Attr Loss: 7.3632 Acc: 0.9433
attribute accuracies
[0.79333333 0.73466667 0.73866667 0.87533333 0.464      0.358
 0.852      0.66       0.92533333 0.69266667 0.95333333 0.662     ]
Epoch 33/59
----------
train Loss: 0.0944 Attr Loss: 7.0128 Acc: 0.9843
attribute accuracies
[0.81598073 0.74244651 0.76829169 0.89314878 0.5133513  0.41874898
 0.87796015 0.7059448  0.94786053 0.74767271 0.97248081 0.72390985]
val Loss: 0.1815 Attr Loss: 7.3526 Acc: 0.9480
attribute accuracies
[0.79333333 0.73733333 0.74       0.87466667 0.464      0.35466667
 0.85333333 0.65733333 0.92533333 0.69666667 0.95266667 0.66466667]
Epoch 34/59
----------
train Loss: 0.0852 Attr Loss: 6.9805 Acc: 0.9870
attribute accuracies
[0.81785889 0.742569   0.7696799  0.89335293 0.5173526  0.42177037
 0.87791932 0.70957864 0.94802384 0.75081659 0.97248081 0.72660461]
val Loss: 0.1808 Attr Loss: 7.3279 Acc: 0.9480
attribute accuracies
[0.79466667 0.734      0.738      0.87466667 0.466      0.36266667
 0.85333333 0.66133333 0.928      0.698      0.954      0.66066667]
Epoch 35/59
----------
train Loss: 0.0874 Attr Loss: 6.9508 Acc: 0.9867
attribute accuracies
[0.8181447  0.74432468 0.76980238 0.89318961 0.5188633  0.42299526
 0.87796015 0.71382492 0.94790136 0.75065327 0.97248081 0.73350482]
val Loss: 0.1731 Attr Loss: 7.3084 Acc: 0.9513
attribute accuracies
[0.79333333 0.73333333 0.74       0.87466667 0.46666667 0.36333333
 0.85266667 0.66066667 0.92666667 0.70133333 0.95266667 0.662     ]
Epoch 36/59
----------
train Loss: 0.0863 Attr Loss: 6.9241 Acc: 0.9874
attribute accuracies
[0.81875715 0.74591703 0.7707823  0.89310795 0.52433448 0.42826229
 0.87804181 0.716683   0.94790136 0.75465458 0.97248081 0.73236159]
val Loss: 0.1786 Attr Loss: 7.2971 Acc: 0.9493
attribute accuracies
[0.796      0.73466667 0.74266667 0.87533333 0.46066667 0.368
 0.85333333 0.66133333 0.92533333 0.698      0.95266667 0.672     ]
Epoch 37/59
----------
train Loss: 0.0845 Attr Loss: 6.9007 Acc: 0.9884
attribute accuracies
[0.81985955 0.74681529 0.7714764  0.89302629 0.52531439 0.42895639
 0.87783766 0.71374326 0.94786053 0.75375633 0.97243998 0.73464805]
val Loss: 0.1776 Attr Loss: 7.2795 Acc: 0.9520
attribute accuracies
[0.79466667 0.736      0.742      0.87533333 0.47533333 0.36933333
 0.85333333 0.66333333 0.926      0.7        0.95466667 0.67133333]
Epoch 38/59
----------
train Loss: 0.0835 Attr Loss: 6.8677 Acc: 0.9891
attribute accuracies
[0.81941042 0.74771354 0.77110893 0.89314878 0.52939735 0.43173281
 0.87779683 0.71994937 0.94786053 0.75669606 0.97248081 0.73709783]
val Loss: 0.1767 Attr Loss: 7.2392 Acc: 0.9500
attribute accuracies
[0.794      0.73333333 0.74533333 0.876      0.47866667 0.36933333
 0.85666667 0.66666667 0.92733333 0.71133333 0.95333333 0.67933333]
Epoch 39/59
----------
train Loss: 0.0811 Attr Loss: 6.8486 Acc: 0.9899
attribute accuracies
[0.82153356 0.74881594 0.77315042 0.89318961 0.53058141 0.4355708
 0.87791932 0.72203168 0.94798301 0.75979912 0.97243998 0.73938429]
val Loss: 0.1777 Attr Loss: 7.2260 Acc: 0.9500
attribute accuracies
[0.794      0.73733333 0.742      0.87733333 0.48       0.38066667
 0.854      0.674      0.926      0.70266667 0.95466667 0.67733333]
Epoch 40/59
----------
train Loss: 0.0814 Attr Loss: 6.8186 Acc: 0.9900
attribute accuracies
[0.82239098 0.74885677 0.77376286 0.89327127 0.53225543 0.43601992
 0.87800098 0.7255022  0.94794219 0.76298383 0.97248081 0.7451821 ]
val Loss: 0.1862 Attr Loss: 7.2380 Acc: 0.9527
attribute accuracies
[0.79533333 0.736      0.74333333 0.87533333 0.47666667 0.36866667
 0.854      0.66866667 0.92666667 0.70666667 0.95333333 0.67      ]
Epoch 41/59
----------
train Loss: 0.0817 Attr Loss: 6.8034 Acc: 0.9899
attribute accuracies
[0.82214601 0.75183733 0.77498775 0.89310795 0.53458272 0.43683652
 0.877756   0.72431814 0.94790136 0.76196309 0.97243998 0.74330394]
val Loss: 0.1809 Attr Loss: 7.1923 Acc: 0.9520
attribute accuracies
[0.79466667 0.73866667 0.74933333 0.874      0.48066667 0.374
 0.85466667 0.66933333 0.926      0.71066667 0.954      0.686     ]
Epoch 42/59
----------
train Loss: 0.0818 Attr Loss: 6.7743 Acc: 0.9904
attribute accuracies
[0.82377919 0.7504083  0.77576351 0.89310795 0.53466438 0.43859219
 0.87796015 0.729626   0.94798301 0.76584191 0.97243998 0.74697861]
val Loss: 0.1853 Attr Loss: 7.1821 Acc: 0.9500
attribute accuracies
[0.8        0.74066667 0.748      0.878      0.47866667 0.37333333
 0.854      0.67866667 0.926      0.708      0.954      0.672     ]
Epoch 43/59
----------
train Loss: 0.0828 Attr Loss: 6.7533 Acc: 0.9904
attribute accuracies
[0.82390168 0.75477707 0.77715172 0.89323044 0.53989058 0.44361424
 0.87796015 0.73052425 0.94790136 0.76543361 0.97248081 0.74579455]
val Loss: 0.1834 Attr Loss: 7.1800 Acc: 0.9527
attribute accuracies
[0.798      0.73533333 0.74666667 0.876      0.48066667 0.37466667
 0.85333333 0.672      0.92666667 0.71066667 0.954      0.66933333]
Epoch 44/59
----------
train Loss: 0.0823 Attr Loss: 6.7334 Acc: 0.9903
attribute accuracies
[0.82463662 0.75596113 0.77764168 0.89306712 0.54062551 0.44083782
 0.87796015 0.7300343  0.94794219 0.77139474 0.97243998 0.74657031]
val Loss: 0.1822 Attr Loss: 7.1814 Acc: 0.9533
attribute accuracies
[0.798      0.73666667 0.75       0.874      0.47266667 0.382
 0.854      0.68133333 0.92533333 0.70733333 0.95266667 0.67866667]
Epoch 45/59
----------
train Loss: 0.0822 Attr Loss: 6.7161 Acc: 0.9906
attribute accuracies
[0.82594317 0.75722685 0.77931569 0.89302629 0.54262616 0.44728891
 0.87787849 0.73150416 0.94786053 0.76951658 0.97243998 0.75106157]
val Loss: 0.1914 Attr Loss: 7.1528 Acc: 0.9520
attribute accuracies
[0.80066667 0.736      0.75       0.876      0.48666667 0.382
 0.85266667 0.674      0.92533333 0.716      0.95266667 0.67933333]
Epoch 46/59
----------
train Loss: 0.0826 Attr Loss: 6.6963 Acc: 0.9911
attribute accuracies
[0.82680059 0.75832925 0.78013229 0.89310795 0.54474931 0.44618651
 0.87787849 0.73015679 0.94794219 0.77135391 0.97248081 0.75130655]
val Loss: 0.1914 Attr Loss: 7.1231 Acc: 0.9507
attribute accuracies
[0.80333333 0.73866667 0.74933333 0.878      0.486      0.37933333
 0.856      0.68       0.926      0.71466667 0.954      0.688     ]
Epoch 47/59
----------
train Loss: 0.0824 Attr Loss: 6.6739 Acc: 0.9915
attribute accuracies
[0.82765801 0.76012576 0.7807039  0.89306712 0.54670913 0.45194349
 0.87791932 0.73820023 0.94786053 0.7714764  0.97252164 0.75694104]
val Loss: 0.1909 Attr Loss: 7.1220 Acc: 0.9507
attribute accuracies
[0.80066667 0.742      0.748      0.87466667 0.48666667 0.38466667
 0.85333333 0.69066667 0.92533333 0.70733333 0.95266667 0.68333333]
Epoch 48/59
----------
train Loss: 0.0796 Attr Loss: 6.6453 Acc: 0.9919
attribute accuracies
[0.82908705 0.76314715 0.78315368 0.89310795 0.54944472 0.4507186
 0.87791932 0.73677119 0.94790136 0.7773967  0.97243998 0.75979912]
val Loss: 0.1865 Attr Loss: 7.1053 Acc: 0.9553
attribute accuracies
[0.79866667 0.74266667 0.75066667 0.87466667 0.48866667 0.38733333
 0.856      0.68333333 0.926      0.712      0.95266667 0.68866667]
Epoch 49/59
----------
train Loss: 0.0833 Attr Loss: 6.6261 Acc: 0.9915
attribute accuracies
[0.82855626 0.76375959 0.78462355 0.89310795 0.55136371 0.45549567
 0.87783766 0.73950678 0.94790136 0.77837661 0.97248081 0.75906418]
val Loss: 0.1882 Attr Loss: 7.1051 Acc: 0.9533
attribute accuracies
[0.80266667 0.74       0.75133333 0.874      0.48866667 0.38466667
 0.85333333 0.69266667 0.92533333 0.712      0.95333333 0.68666667]
Epoch 50/59
----------
train Loss: 0.0829 Attr Loss: 6.6105 Acc: 0.9925
attribute accuracies
[0.83014862 0.76547444 0.78531765 0.89306712 0.55528336 0.45092275
 0.87787849 0.73799608 0.94798301 0.7804181  0.97248081 0.76204475]
val Loss: 0.1893 Attr Loss: 7.0834 Acc: 0.9520
attribute accuracies
[0.8        0.74466667 0.756      0.87533333 0.5        0.38133333
 0.852      0.68266667 0.92733333 0.71533333 0.95333333 0.69333333]
Epoch 51/59
----------
train Loss: 0.0852 Attr Loss: 6.5885 Acc: 0.9905
attribute accuracies
[0.83002613 0.7666585  0.78637923 0.89302629 0.55360934 0.45770047
 0.87800098 0.73709783 0.94798301 0.77772334 0.97272579 0.76253471]
val Loss: 0.1941 Attr Loss: 7.0752 Acc: 0.9527
attribute accuracies
[0.80066667 0.74733333 0.76066667 0.87666667 0.496      0.384
 0.85333333 0.692      0.92533333 0.71133333 0.95266667 0.68333333]
Epoch 52/59
----------
train Loss: 0.0856 Attr Loss: 6.5750 Acc: 0.9911
attribute accuracies
[0.83031194 0.76849584 0.78940062 0.89298546 0.55899886 0.45786379
 0.87783766 0.74179324 0.94790136 0.77882574 0.97243998 0.76310632]
val Loss: 0.1967 Attr Loss: 7.0589 Acc: 0.9527
attribute accuracies
[0.80066667 0.74266667 0.75933333 0.87466667 0.498      0.38466667
 0.85466667 0.68733333 0.92666667 0.71866667 0.95266667 0.694     ]
Epoch 53/59
----------
train Loss: 0.0840 Attr Loss: 6.5519 Acc: 0.9915
attribute accuracies
[0.83170015 0.76931243 0.78903315 0.89314878 0.56116283 0.45831292
 0.87787849 0.74236485 0.94790136 0.78225543 0.97248081 0.76547444]
val Loss: 0.1930 Attr Loss: 7.0300 Acc: 0.9527
attribute accuracies
[0.80666667 0.74533333 0.76       0.87666667 0.49866667 0.38866667
 0.85466667 0.68266667 0.92666667 0.71733333 0.954      0.68533333]
Epoch 54/59
----------
train Loss: 0.0840 Attr Loss: 6.5335 Acc: 0.9924
attribute accuracies
[0.83288421 0.76976155 0.79172791 0.89318961 0.56018292 0.46276335
 0.87783766 0.74428385 0.94794219 0.78478687 0.97248081 0.7655561 ]
val Loss: 0.1953 Attr Loss: 7.0221 Acc: 0.9527
attribute accuracies
[0.804      0.74133333 0.764      0.87533333 0.50466667 0.38866667
 0.85333333 0.68133333 0.92533333 0.718      0.95266667 0.694     ]
Epoch 55/59
----------
train Loss: 0.0794 Attr Loss: 6.5078 Acc: 0.9928
attribute accuracies
[0.83223093 0.77127225 0.79442267 0.89302629 0.5637351  0.46443737
 0.87791932 0.74452883 0.94794219 0.7870325  0.97243998 0.76812837]
val Loss: 0.1891 Attr Loss: 6.9888 Acc: 0.9553
attribute accuracies
[0.80466667 0.74533333 0.762      0.874      0.50333333 0.39133333
 0.85333333 0.69       0.92666667 0.726      0.95266667 0.69466667]
Epoch 56/59
----------
train Loss: 0.0838 Attr Loss: 6.4903 Acc: 0.9918
attribute accuracies
[0.83312919 0.77527356 0.79491262 0.89318961 0.56655234 0.46717295
 0.87779683 0.7458762  0.94798301 0.78927813 0.97248081 0.7692716 ]
val Loss: 0.1814 Attr Loss: 6.9760 Acc: 0.9580
attribute accuracies
[0.802      0.746      0.76733333 0.876      0.49933333 0.394
 0.854      0.68466667 0.92533333 0.73066667 0.95266667 0.698     ]
Epoch 57/59
----------
train Loss: 0.0793 Attr Loss: 6.4650 Acc: 0.9932
attribute accuracies
[0.83566062 0.77580434 0.79883227 0.8933121  0.56610322 0.46574392
 0.87783766 0.74530459 0.94794219 0.79107464 0.97243998 0.77413033]
val Loss: 0.1874 Attr Loss: 6.9807 Acc: 0.9567
attribute accuracies
[0.804      0.74533333 0.76466667 0.87533333 0.494      0.39666667
 0.85266667 0.68666667 0.92666667 0.72333333 0.95266667 0.69333333]
Epoch 58/59
----------
train Loss: 0.0827 Attr Loss: 6.4508 Acc: 0.9919
attribute accuracies
[0.83557896 0.77764168 0.79740323 0.89310795 0.56789972 0.46684632
 0.87791932 0.75244978 0.94798301 0.79127878 0.97243998 0.77261963]
val Loss: 0.1910 Attr Loss: 6.9541 Acc: 0.9573
attribute accuracies
[0.80266667 0.74866667 0.762      0.87733333 0.50466667 0.38466667
 0.85466667 0.69333333 0.926      0.72466667 0.954      0.688     ]
Epoch 59/59
----------
train Loss: 0.0834 Attr Loss: 6.4311 Acc: 0.9923
attribute accuracies
[0.83729381 0.78017312 0.80001633 0.89314878 0.56981872 0.47064348
 0.87796015 0.75387882 0.94790136 0.79319778 0.97243998 0.77760085]
val Loss: 0.1970 Attr Loss: 6.9517 Acc: 0.9560
attribute accuracies
[0.802      0.75       0.76333333 0.87333333 0.50266667 0.392
 0.85466667 0.68933333 0.926      0.73       0.95333333 0.69866667]
Training complete in 120m 14s
