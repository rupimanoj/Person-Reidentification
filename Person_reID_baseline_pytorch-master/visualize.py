#all the images generated by Visualize.py will in be ./Visualize folder
import os
import torch
import scipy.io
import argparse
import pandas as pd
import numpy as np
from shutil import copyfile
import matplotlib
import matplotlib.pyplot as plt

def visuvalize(arr,names_q,labels_q,dict_mapping,dict_labels,query_path,gallery_path,title):
    k=len(arr)
    fig,axs = plt.subplots(k,11,figsize=(16, 40))
    fig.suptitle(title, fontsize=64)
    for k,index in enumerate(arr,0):
        src_path=query_path+"/"+names_q[index]+".png"
        im=plt.imread(src_path)
        axs[k,0].imshow(im)
        axs[k,0].set_title("query",color='green')
        axs[k,0].axis("off")
        t=0
        for i,j in zip(dict_mapping[names_q[index]],dict_labels[labels_q[index]]):
            img_path = gallery_path+"/"+i+".png"
            label = j
            im = plt.imread(img_path)
            axs[k,t+1].imshow(im)
            if label == labels_q[index]:
                axs[k,t+1].set_title('%d'%(t+1), color='green')
            else:
                axs[k,t+1].set_title('%d'%(t+1), color='red')
            axs[k,t+1].axis("off")
            t=t+1
    return fig
        

def view(query,q_label,dict_mapping,dict_labels,query_path,gallery_path):
    src_path=query_path+"/"+query+".png"
    fig,axs = plt.subplots(1,11,figsize=(16, 4))
    fig.suptitle("For single query", fontsize=16)
    im = plt.imread(src_path)
    axs[0].imshow(im)
    axs[0].set_title("query",color='green')
    axs[0].axis("off")
    k=0
    for i,j in zip(dict_mapping[query],dict_labels[q_label]):
        img_path = gallery_path+"/"+i+".png"
        label = j
        im = plt.imread(img_path)
        axs[k+1].imshow(im)
        if label == q_label:
            axs[k+1].set_title('%d'%(k+1), color='green')
        else:
            axs[k+1].set_title('%d'%(k+1), color='red')
        axs[k+1].axis("off")
        k=k+1
    return fig

def get_bestten(names_q,labels_q,dict_labels):
    best_ten=[]
    count=0
    for i in range(len(labels_q)):
        labels_g=dict_labels[labels_q[i]]
        c=0
        for j in range(0,3):
            if labels_g[j]==labels_q[i]:
                c=c+1
        if(c==3):
            best_ten.append(i)
            count=count+1
        
        if(count >=10):
            break

    return best_ten

def get_worstten(names_q,labels_q,dict_labels):
    worst_ten=[]
    count=0
    for i in range(len(labels_q)):
        labels_g=dict_labels[labels_q[i]]
        k=0
        for j in range(0,10):
            if labels_g[j]==labels_q[i]:
                k=1
                break
        if(k==0):
            worst_ten.append(i)
            count = count+1
        if(count>=10):
            break
    return worst_ten


def main():
    # settings
    parser = argparse.ArgumentParser(description='Visualize')
    parser.add_argument('--features', type=str, default='../Market-1501-v15.09.15/extracted')
    parser.add_argument('--labels', type=str, default='../Market-1501-v15.09.15/extracted')
    parser.add_argument('--gpu', type=int, default=0)
    parser.add_argument('--query_index', default=0, type=int, help='test_image_index')
    parser.add_argument('--data_path',default='../valSet',type=str, help='./test_data')
    args = parser.parse_args()

    logPath = args.features
    if not os.path.isdir(logPath):
        raise Exception('Give correct folder name where feature mat files are present')
    labelPath = args.labels
    if not os.path.isdir(labelPath):
        raise Exception('Give correct folder name where Info.txt files are present')
    data_path=args.data_path
    if not os.path.isdir(data_path):
        raise Exception('Give correct folder name where validation data files are present')
    q_index=args.query_index
    if(q_index>149):
        raise Exception("Index should be less tha 150")
    query_path=data_path+"/query"
    gallery_path=data_path+"/gallery"
    figures_path="./visualization"
    if not os.path.isdir(figures_path):
        os.mkdir(figures_path)
    
    
    logFile = {subset: scipy.io.loadmat(os.path.join(logPath, 'feature_val_%s.mat' % subset))
               for subset in ['query', 'gallery']}

    labelDict = {subset: pd.read_csv(os.path.join(labelPath, subset + 'Info.txt'), header=None,
                                     delimiter='\t').set_index(0)[1].to_dict() for subset in ['query', 'gallery']}

    names = {subset: logFile[subset]['names'] for subset in ['query', 'gallery']}
    labels = {subset: np.array([labelDict[subset][name] for name in names[subset]]) for subset in ['query', 'gallery']}
    features = {subset: torch.FloatTensor(logFile[subset]['features']) for subset in ['query', 'gallery']}
    dict_mapping={}
    dict_labels={}
    for i in range(len(labels['query'])):
        score = torch.mm(features['gallery'], features['query'][i].view(-1, 1))
        score = score.squeeze(1).cpu().numpy()
        temp=np.argsort(score)[::-1]
        temp=temp[:10]
        dict_mapping[names['query'][i]]=[names['gallery'][i] for i in temp]
        dict_labels[labels['query'][i]]=[labels['gallery'][i] for i in temp]


    q_fig=view(names['query'][q_index],labels['query'][q_index],dict_mapping,dict_labels,query_path,gallery_path)
    q_fig.savefig(figures_path+"/query.png")

    #best 10 are those images which contain same label as query image in first 3 images
    best_10 = get_bestten(names['query'],labels['query'],dict_labels)

    #worst_10 are those images which do not contain same label as query image in all 10 images
    worst_10= get_worstten(names['query'],labels['query'],dict_labels)

    best_fig=visuvalize(best_10,names['query'],labels['query'],dict_mapping,dict_labels,query_path,gallery_path,"Top 10 queries")
    best_fig.savefig(figures_path+"/Best10.png")

    worst_fig=visuvalize(worst_10,names['query'],labels['query'],dict_mapping,dict_labels,query_path,gallery_path,"Worst %d queries"%(len(worst_10)))
    worst_fig.savefig(figures_path+"/Worst%d.png"%len(worst_10))

if __name__ == '__main__':
    main()
